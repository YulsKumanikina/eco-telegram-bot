# =========================================================================
# ===           –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–û–î–ü–ò–°–ö–û–ô –ù–ê –°–û–í–ï–¢–´                ===
# =========================================================================

import telebot
from telebot import types 
import pandas as pd
import json
import re
from typing import List, Tuple
from gigachat.client import GigaChatSyncClient
from gigachat.models import Chat, Messages, MessagesRole
import random
from datetime import datetime, date

# --- –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ß–ï–õ–õ–ï–ù–î–ñ–ï–ô ---
import db_manager as db
import challenges_data as challenges
from apscheduler.schedulers.background import BackgroundScheduler

# ... (–≤—Å–µ –≤–∞—à–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
user_context = {}
STOP_WORDS = set(['–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ', '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É', '—Ç–∞–∫–æ–µ', '—ç—Ç–æ'])
SEARCH_TRIGGERS = ['–∫—É–¥–∞ —Å–¥–∞—Ç—å', '–≥–¥–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç', '–ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞', '–ø—É–Ω–∫—Ç—ã –ø—Ä–∏—ë–º–∞', '–∞–¥—Ä–µ—Å–∞', '–∞–¥—Ä–µ—Å', '–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–≥–¥–µ', '–∫—É–¥–∞']
JUNK_PREFIXES = ['–∞', '–≤', '–∏', '—Å', '–∫', '–ø–æ']

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    from config import (TELEGRAM_TOKEN, GIGACHAT_API_KEY, KNOLEDGE_BASE_PATH, RECYCLING_POINTS_PATH, INTERESTING_FACTS_PATH, FALLBACK_POINTS)
except ImportError:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª config.py –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–µ–º.")
    exit()

ECO_TIPS_PATH = 'data/eco_tips.json' # –ü—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É —Å —Å–æ–≤–µ—Ç–∞–º–∏
MAX_POINTS_TO_SHOW = 3

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = telebot.TeleBot(TELEGRAM_TOKEN)
try:
    giga = GigaChatSyncClient(credentials=GIGACHAT_API_KEY, verify_ssl_certs=False)
    print("GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GigaChat: {e}"); giga = None

db.init_db()
print("–ë–æ—Ç (–≤ —Ä–µ–∂–∏–º–µ polling) –∑–∞–ø—É—â–µ–Ω...")

# --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
def load_data() -> Tuple[pd.DataFrame, List[dict], List[str], List[str]]:
    try:
        points = pd.read_csv(RECYCLING_POINTS_PATH)
        with open(KNOLEDGE_BASE_PATH, 'r', encoding='utf-8') as f: knowledge = json.load(f)
        with open(INTERESTING_FACTS_PATH, 'r', encoding='utf-8') as f: facts = json.load(f)
        with open(ECO_TIPS_PATH, 'r', encoding='utf-8') as f: tips = json.load(f) # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–≤–µ—Ç—ã
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return points, knowledge, facts, tips
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"); return pd.DataFrame(), [], [], []
points_df, knowledge_base, interesting_facts, eco_tips = load_data()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
# ... (–≤—Å–µ –≤–∞—à–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫—Ä–æ–º–µ create_main_keyboard, –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def escape_markdown(text: str) -> str:
    return re.sub(f'([{re.escape(r"_*[]()~`>#+-=|{}.!")}])', r'\\\1', text)

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # –î–æ–±–∞–≤–ª—è–µ–º 5 –∫–Ω–æ–ø–æ–∫. 5-—è –±—É–¥–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É.
    markup.add(
        types.KeyboardButton('–ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç ‚ôªÔ∏è'), 
        types.KeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üß†'),
        types.KeyboardButton('–≠–∫–æ-—á–µ–ª–ª–µ–Ω–¥–∂ üí™'), 
        types.KeyboardButton('–≠–∫–æ-—Ñ–∞–∫—Ç ‚ú®')
    )
    markup.add(types.KeyboardButton('–°–æ–≤–µ—Ç –¥–Ω—è üí°')) # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    return markup
#... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ extract_entities, find_recycling_points –∏ —Ç.–¥. –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ---
def check_challenges():
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    pass

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–°–´–õ–ö–ò –°–û–í–ï–¢–û–í
def send_daily_tip():
    print(f"[{datetime.now()}] –ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —ç–∫–æ-—Å–æ–≤–µ—Ç–æ–≤...")
    subscribers = db.get_all_subscribers()
    if not subscribers or not eco_tips:
        print("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
        
    tip_of_the_day = random.choice(eco_tips)
    message = f"üí° *–≠–∫–æ-—Å–æ–≤–µ—Ç –¥–Ω—è:*\n\n{escape_markdown(tip_of_the_day)}"
    
    for user_id in subscribers:
        try:
            bot.send_message(user_id, message, parse_mode='MarkdownV2')
        except Exception as e:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            if 'bot was blocked by the user' in str(e):
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")
                db.remove_subscriber(user_id)
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "‚ôªÔ∏è *–ü—Ä–∏–≤–µ—Ç\\! –Ø –≤–∞—à —ç–∫–æ\\-–ø–æ–º–æ—â–Ω–∏–∫\\.*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\\!", parse_mode='MarkdownV2', reply_markup=create_main_keyboard())

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ß–ï–õ–õ–ï–ù–î–ñ–ï–ô –ò –°–û–í–ï–¢–û–í ---
@bot.message_handler(func=lambda message: message.text == '–≠–∫–æ-—á–µ–ª–ª–µ–Ω–¥–∂ üí™')
def handle_challenges_button(message):
    # ... (—ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    pass

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–°–æ–≤–µ—Ç –¥–Ω—è"
@bot.message_handler(func=lambda message: message.text == '–°–æ–≤–µ—Ç –¥–Ω—è üí°')
def handle_tip_button(message):
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    if db.is_subscribed(user_id):
        text = "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —ç–∫–æ-—Å–æ–≤–µ—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?"
        markup.add(types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üîï", callback_data="unsubscribe_tip"))
    else:
        text = "–•–æ—Ç–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–∏–Ω –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –æ–± —ç–∫–æ–ª–æ–≥–∏–∏ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏?"
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üîî", callback_data="subscribe_tip"))
    bot.send_message(user_id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['subscribe_tip', 'unsubscribe_tip'])
def callback_subscription(call):
    user_id = call.from_user.id
    if call.data == 'subscribe_tip':
        db.add_subscriber(user_id)
        bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '–≠–∫–æ-—Å–æ–≤–µ—Ç –¥–Ω—è'. –ñ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º.", call.message.chat.id, call.message.message_id)
    elif call.data == 'unsubscribe_tip':
        db.remove_subscriber(user_id)
        bot.edit_message_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é —Å–Ω–æ–≤–∞.", call.message.chat.id, call.message.message_id)

# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query_handler –∏ handle_text –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
# ...

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ---
if __name__ == "__main__":
    scheduler = BackgroundScheduler()
    # –ó–∞–¥–∞—á–∞ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤ 10:00
    scheduler.add_job(check_challenges, 'cron', hour=10)
    # –ó–ê–î–ê–ß–ê 2: –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –≤ 11:00
    scheduler.add_job(send_daily_tip, 'cron', hour=11)
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω.")
    
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
        scheduler.shutdown()