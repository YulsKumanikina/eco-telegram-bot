# bot_polling.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –°–õ–£–ß–ê–ô–ù–´–ï –§–ê–ö–¢–´)
import telebot
import pandas as pd
import json
import re
from typing import List, Tuple
from gigachat.client import GigaChatSyncClient
from gigachat.models import Chat, Messages, MessagesRole
import random # <-- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ú–û–î–£–õ–¨ –î–õ–Ø –°–õ–£–ß–ê–ô–ù–û–ì–û –í–´–ë–û–†–ê

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    from config import TELEGRAM_TOKEN, GIGACHAT_API_KEY, KNOLEDGE_BASE_PATH, RECYCLING_POINTS_PATH
except ImportError:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–µ–º.")
    exit()

INTERESTING_FACTS_PATH = './data/interesting_facts.json' # <-- –ù–û–í–´–ô –ü–£–¢–¨
MAX_POINTS_TO_SHOW = 3

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ ---
bot = telebot.TeleBot(TELEGRAM_TOKEN)
try:
    giga = GigaChatSyncClient(credentials=GIGACHAT_API_KEY, verify_ssl_certs=False)
    print("GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GigaChat: {e}")
    giga = None

print("–ë–æ—Ç (–≤ —Ä–µ–∂–∏–º–µ polling) –∑–∞–ø—É—â–µ–Ω...")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def load_data() -> Tuple[pd.DataFrame, List[dict], List[str]]: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï
    try:
        points = pd.read_csv(RECYCLING_POINTS_PATH)
        with open(KNOLEDGE_BASE_PATH, 'r', encoding='utf-8') as f:
            knowledge = json.load(f)
        with open(INTERESTING_FACTS_PATH, 'r', encoding='utf-8') as f: # <-- –ó–ê–ì–†–£–ñ–ê–ï–ú –§–ê–ö–¢–´
            facts = json.load(f)
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return points, knowledge, facts
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"); return pd.DataFrame(), [], []

points_df, knowledge_base, interesting_facts = load_data() # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ... (–∫–æ–¥ –¥–æ handle_text –æ–ø—É—â–µ–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏) ...
def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'; return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)
def extract_entities(text: str) -> Tuple[str | None, str | None, str | None]:
    clean_text = re.sub(r'[^\w\s]', '', text).lower(); city, material, district = None, None, None; cities = ['–≤–æ—Ä–æ–Ω–µ–∂', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'];
    for c in cities:
        if c in clean_text: city = c; break
    if city == '–≤–æ—Ä–æ–Ω–µ–∂':
        districts = ['—Å–æ–≤–µ—Ç—Å–∫–∏–π', '–ª–µ–Ω–∏–Ω—Å–∫–∏–π', '–∫–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∏–π', '–ª–µ–≤–æ–±–µ—Ä–µ–∂–Ω—ã–π', '–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π']
        for d in districts:
            if d in clean_text: district = d; clean_text = clean_text.replace(d, '').replace('—Ä–∞–π–æ–Ω', ''); break
    if city: material = clean_text.replace(city, '').replace('–∫—É–¥–∞ —Å–¥–∞—Ç—å', '').replace('–≥–¥–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç', '').replace('–≤', '').strip()
    return material, city, district
def find_recycling_points(material: str, city: str) -> Tuple[List[dict], List[str]]:
    if points_df.empty or not material or not city: return [], [];
    try:
        synonym_map = {'–±—É—Ç—ã–ª–∫': ['–±—É—Ç—ã–ª–∫', '–ø—ç—Ç', '–ø–ª–∞—Å—Ç–∏–∫'], '–ø–ª–∞—Å—Ç–∏–∫': ['–ø–ª–∞—Å—Ç–∏–∫', '–ø—ç—Ç', '–±—É—Ç—ã–ª–∫', 'hdpe', '–ø–Ω–¥'], '–±–∞—Ç–∞—Ä–µ–π–∫': ['–±–∞—Ç–∞—Ä–µ–π–∫', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä'], '–±—É–º–∞–≥': ['–±—É–º–∞–≥', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–∫–∞—Ä—Ç–æ–Ω', '–∫–Ω–∏–≥'], '–∫–∞—Ä—Ç–æ–Ω': ['–∫–∞—Ä—Ç–æ–Ω', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–±—É–º–∞–≥'], '–∫–Ω–∏–≥': ['–∫–Ω–∏–≥', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–±—É–º–∞–≥'], '—Å—Ç–µ–∫–ª': ['—Å—Ç–µ–∫–ª', '–±–∞–Ω–∫'], '–æ–¥–µ–∂–¥': ['–æ–¥–µ–∂–¥', '–≤–µ—â–∏', '—Ç–µ–∫—Å—Ç–∏–ª—å'], '–º–µ—Ç–∞–ª–ª': ['–º–µ—Ç–∞–ª–ª', '–∂–µ—Å—Ç—è–Ω', '–∞–ª—é–º–∏–Ω'], '–∫—Ä—ã—à–∫': ['–∫—Ä—ã—à–∫'], '—Ç–µ—Ö–Ω–∏–∫': ['—Ç–µ—Ö–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'],}
        search_terms = [];
        for key, values in synonym_map.items():
            if key in material: search_terms = values; break
        if not search_terms: search_terms = [material[:-1] if len(material) > 3 else material]
        city_points = points_df[points_df['city'].str.lower() == city.lower()]; valid_points = city_points.dropna(subset=['accepts']); pattern = '|'.join(search_terms)
        found_points = valid_points[valid_points['accepts'].str.lower().str.contains(pattern)]; return found_points.to_dict('records'), search_terms
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"); return [], []
def format_points_response(points: List[dict], header: str, search_terms: List[str]) -> str:
    response_parts = [header]
    for idx, point in enumerate(points, 1):
        name = escape_markdown(point.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')); address = escape_markdown(point.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω'))
        work_hours = escape_markdown(point.get('work_hours', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')); accepts_raw = str(point.get('accepts', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
        accepts_display = ""; found_keyword = False
        for term in search_terms:
            if term in accepts_raw.lower(): accepts_display = f"–î–∞, –≤–∫–ª—é—á–∞—è '{escape_markdown(term.capitalize())}' –∏ –¥—Ä—É–≥–æ–µ\\."; found_keyword = True; break
        if not found_keyword: accepts_display = escape_markdown((accepts_raw[:100] + '...') if len(accepts_raw) > 100 else accepts_raw)
        response_parts.append(
            f"üìç *{idx}\\. {name}*\n"
            f"   *–ê–¥—Ä–µ—Å:* {address}\n"
            f"   *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {work_hours}\n"
            f"   *–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:* {accepts_display}")
    return "\n\n".join(response_parts)
def get_knowledge_answer(question: str) -> str:
    user_words = set(re.sub(r'[^\w\s]', '', question.lower()).split()); best_match_score = 0; best_answer = ""
    for item in knowledge_base:
        kb_words = set(re.sub(r'[^\w\s]', '', item['question'].lower()).split())
        score = len(user_words.intersection(kb_words))
        if score > best_match_score: best_match_score = score; best_answer = item['answer']
    return best_answer if best_match_score >= 2 else ""
def get_gigachat_answer(question: str) -> str:
    if not giga: return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥—É–ª—å GigaChat –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω."
    system_prompt = (
        "–¢–≤–æ—è —Ä–æ–ª—å - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏. –¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç—Ö–æ–¥–æ–≤, –∑–∞—â–∏—Ç–æ–π –ø—Ä–∏—Ä–æ–¥—ã –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º. "
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã (–ø–æ–ª–∏—Ç–∏–∫–∞, –∏—Å—Ç–æ—Ä–∏—è, —Ä–µ—Ü–µ–ø—Ç—ã, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ç.–¥.). "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, —Ç–≤–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–∫–∞–∑: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π. –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–π —Ç–µ–º–µ.'"
        "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (–Ω–µ –±–æ–ª–µ–µ 25 —Å–ª–æ–≤). –í–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –≤—ã–¥–µ–ª—è–π —Ç–µ–≥–∞–º–∏ <b_> –∏ </b_>."
    )
    payload = Chat(messages=[Messages(role=MessagesRole.SYSTEM, content=system_prompt), Messages(role=MessagesRole.USER, content=question)], temperature=0.7)
    try:
        response = giga.chat(payload)
        if response.choices:
            raw_answer = response.choices[0].message.content
            return raw_answer.replace("<b_>", "*").replace("</b_>", "*")
        return "GigaChat –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç."
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}"); return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."

@bot.message_handler(commands=['start'])
def send_welcome(message):
    response = (
        "‚ôªÔ∏è *–ü—Ä–∏–≤–µ—Ç\\! –Ø –≤–∞—à —ç–∫–æ\\-–ø–æ–º–æ—â–Ω–∏–∫\\.*\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä —á–∏—â–µ\\.\n\n"
        "üìç *–ò—â—É –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è*\n"
        "‚Üí _–ö—É–¥–∞ —Å–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏?_\n\n"
        "üß† *–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç–∫–æ–ª–æ–≥–∏–∏*\n"
        "‚Üí _–ü–æ—á–µ–º—É –Ω–µ–ª—å–∑—è —Å–∂–∏–≥–∞—Ç—å –ø–ª–∞—Å—Ç–∏–∫?_\n\n"
        "–ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\\!"
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∏ –∫—É—Ä—Å–∏–≤.
    bot.reply_to(message, response, parse_mode='MarkdownV2')

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    try:
        text = message.text.strip().lower() # –°—Ä–∞–∑—É –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        material, city, district = extract_entities(text)
        
        response = ""
        
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ ---
        fact_triggers = ["—Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å", "—Ä–∞—Å—Å–∫–∞–∂–∏ —Ñ–∞–∫—Ç", "—É–¥–∏–≤–∏ –º–µ–Ω—è", "—á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"]
        if any(trigger in text for trigger in fact_triggers):
            if interesting_facts:
                # <-- –†–ï–®–ï–ù–ò–ï: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π -->
                response = escape_markdown(random.choice(interesting_facts))
            else:
                response = "–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç–∫–æ–ª–æ–≥–∏–∏!"
        
        elif city:
            # ... (–ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            if not material:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–µ –í–æ—Ä–æ–Ω–µ–∂?"
            else:
                all_city_points, search_terms = find_recycling_points(material, city)
                safe_material = escape_markdown(material)
                if not all_city_points: response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≥–æ—Ä–æ–¥–µ {escape_markdown(city.capitalize())} —è –Ω–µ –Ω–∞—à–µ–ª –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞ –¥–ª—è '{safe_material}'\\."
                else:
                    points_to_show = [];
                    if district: all_city_points = [p for p in all_city_points if district in p.get('address', '').lower()] or all_city_points
                    lebestok_points = [p for p in all_city_points if "—Å–µ–¥—å–º–æ–π –ª–µ–ø–µ—Å—Ç–æ–∫" in p.get('name', '').lower()]
                    other_points = [p for p in all_city_points if "—Å–µ–¥—å–º–æ–π –ª–µ–ø–µ—Å—Ç–æ–∫" not in p.get('name', '').lower()]
                    if lebestok_points: points_to_show.append(lebestok_points[0])
                    remaining_slots = MAX_POINTS_TO_SHOW - len(points_to_show)
                    if other_points and remaining_slots > 0: points_to_show.extend(other_points[:remaining_slots])
                    if not points_to_show: response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≥–æ—Ä–æ–¥–µ {escape_markdown(city.capitalize())} —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤\\."
                    else:
                        header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞ –¥–ª—è '{safe_material}' –≤ –≥–æ—Ä–æ–¥–µ {escape_markdown(city.capitalize())}:"
                        if district and any(district in p.get('address', '').lower() for p in points_to_show):
                            safe_district = escape_markdown(district.capitalize()); header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –¥–ª—è '{safe_material}' –≤ —Ä–∞–π–æ–Ω–µ *{safe_district}*:"
                        response = format_points_response(points_to_show, header, search_terms)
        else:
            answer = get_knowledge_answer(text)
            if answer:
                response = escape_markdown(answer)
            else:
                bot.send_chat_action(message.chat.id, 'typing')
                response = get_gigachat_answer(text)
                response = escape_markdown(response).replace(r'\*', '*')

        bot.reply_to(message, response, parse_mode='MarkdownV2')

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "–û–π, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\\.\\.\\.", parse_mode='MarkdownV2')

if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")