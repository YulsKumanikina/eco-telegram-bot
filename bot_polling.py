# =========================================================================
# ===                  –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø BOT_POLLING.PY                  ===
# ===             (–° –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)             ===
# =========================================================================

import telebot
from telebot import types 
import pandas as pd
import json
import re
from typing import List, Tuple
from gigachat.client import GigaChatSyncClient
from gigachat.models import Chat, Messages, MessagesRole
import random

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ò –°–õ–û–í–ê–†–ò ---

user_context = {}
STOP_WORDS = set(['–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ', '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É', '—Ç–∞–∫–æ–µ', '—ç—Ç–æ'])
SEARCH_TRIGGERS = ['–∫—É–¥–∞ —Å–¥–∞—Ç—å', '–≥–¥–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç', '–ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞', '–ø—É–Ω–∫—Ç—ã –ø—Ä–∏—ë–º–∞', '–∞–¥—Ä–µ—Å–∞', '–∞–¥—Ä–µ—Å', '–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–≥–¥–µ', '–∫—É–¥–∞']

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    from config import (TELEGRAM_TOKEN, GIGACHAT_API_KEY, KNOLEDGE_BASE_PATH, RECYCLING_POINTS_PATH, INTERESTING_FACTS_PATH, FALLBACK_POINTS)
except ImportError:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª config.py –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–µ–º.")
    exit()

MAX_POINTS_TO_SHOW = 3

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = telebot.TeleBot(TELEGRAM_TOKEN)
try:
    giga = GigaChatSyncClient(credentials=GIGACHAT_API_KEY, verify_ssl_certs=False)
    print("GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GigaChat: {e}")
    giga = None

print("–ë–æ—Ç (–≤ —Ä–µ–∂–∏–º–µ polling) –∑–∞–ø—É—â–µ–Ω...")

# --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
def load_data() -> Tuple[pd.DataFrame, List[dict], List[str]]:
    try:
        points = pd.read_csv(RECYCLING_POINTS_PATH)
        with open(KNOLEDGE_BASE_PATH, 'r', encoding='utf-8') as f: knowledge = json.load(f)
        with open(INTERESTING_FACTS_PATH, 'r', encoding='utf-8') as f: facts = json.load(f)
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return points, knowledge, facts
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame(), [], []

points_df, knowledge_base, interesting_facts = load_data()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton('–ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç ‚ôªÔ∏è'), types.KeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üß†'), types.KeyboardButton('–≠–∫–æ-—Ñ–∞–∫—Ç ‚ú®'))
    return markup

def extract_entities(text: str) -> Tuple[str | None, str | None, str | None]:
    clean_text = re.sub(r'[^\w\s]', '', text).lower()
    city, material, district = None, None, None
    cities = ['–≤–æ—Ä–æ–Ω–µ–∂', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥']
    for c in cities:
        if c in clean_text: city = c; break
    if city == '–≤–æ—Ä–æ–Ω–µ–∂':
        districts = ['—Å–æ–≤–µ—Ç—Å–∫–∏–π', '–ª–µ–Ω–∏–Ω—Å–∫–∏–π', '–∫–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∏–π', '–ª–µ–≤–æ–±–µ—Ä–µ–∂–Ω—ã–π', '–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π']
        for d in districts:
            if d in clean_text: district = d; clean_text = clean_text.replace(d, '').replace('—Ä–∞–π–æ–Ω', ''); break
    if city:
        temp_material = clean_text.replace(city, '')
        for trigger in SEARCH_TRIGGERS: temp_material = temp_material.replace(trigger, '')
        material = temp_material.replace(' –≤ ', ' ').strip()
    return material, city, district

def find_recycling_points(material: str, city: str) -> Tuple[List[dict], List[str]]:
    if points_df.empty or not material or not city: return [], []
    try:
        synonym_map = {'–±—É—Ç—ã–ª–∫': ['–±—É—Ç—ã–ª–∫', '–ø—ç—Ç', '–ø–ª–∞—Å—Ç–∏–∫'], '–ø–ª–∞—Å—Ç–∏–∫': ['–ø–ª–∞—Å—Ç–∏–∫', '–ø—ç—Ç', '–±—É—Ç—ã–ª–∫', 'hdpe', '–ø–Ω–¥'], '–±–∞—Ç–∞—Ä–µ–π–∫': ['–±–∞—Ç–∞—Ä–µ–π–∫', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä'], '–±—É–º–∞–≥': ['–±—É–º–∞–≥', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–∫–∞—Ä—Ç–æ–Ω', '–∫–Ω–∏–≥'], '–∫–∞—Ä—Ç–æ–Ω': ['–∫–∞—Ä—Ç–æ–Ω', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–±—É–º–∞–≥'], '–∫–Ω–∏–≥': ['–∫–Ω–∏–≥', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–±—É–º–∞–≥'], '—Å—Ç–µ–∫–ª': ['—Å—Ç–µ–∫–ª', '–±–∞–Ω–∫'], '–æ–¥–µ–∂–¥': ['–æ–¥–µ–∂–¥', '–≤–µ—â–∏', '—Ç–µ–∫—Å—Ç–∏–ª—å'], '–º–µ—Ç–∞–ª–ª': ['–º–µ—Ç–∞–ª–ª', '–∂–µ—Å—Ç—è–Ω', '–∞–ª—é–º–∏–Ω'], '–∫—Ä—ã—à–∫': ['–∫—Ä—ã—à–∫'], '—Ç–µ—Ö–Ω–∏–∫': ['—Ç–µ—Ö–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'], '–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã': ['–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã', '—Ä—Ç—É—Ç—å', '–≥—Ä–∞–¥—É—Å–Ω–∏–∫', '–ª–∞–º–ø–æ—á–∫', '–ª–∞–º–ø–∞']}
        search_terms = []
        for key, values in synonym_map.items():
            if key in material: search_terms = values; break
        if not search_terms: search_terms = [material[:-1] if len(material) > 3 else material]
        city_points = points_df[points_df['city'].str.lower() == city.lower()]
        valid_points = city_points.dropna(subset=['accepts'])
        pattern = '|'.join(search_terms)
        found_points = valid_points[valid_points['accepts'].str.lower().str.contains(pattern)]
        return found_points.to_dict('records'), search_terms
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return [], []

def format_points_response(points: List[dict], header: str, search_terms: List[str], original_material: str) -> str:
    response_parts = [header]
    for idx, point in enumerate(points, 1):
        name = escape_markdown(point.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        address = escape_markdown(point.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω'))
        work_hours = escape_markdown(point.get('work_hours', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'))
        accepts_raw = str(point.get('accepts', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
        accepts_display = ""
        if any(term in accepts_raw.lower() for term in search_terms):
            accepts_display = f"–î–∞, –≤–∫–ª—é—á–∞—è '{escape_markdown(original_material.capitalize())}' –∏ –¥—Ä—É–≥–æ–µ\\."
        else:
            accepts_display = escape_markdown((accepts_raw[:100] + '...') if len(accepts_raw) > 100 else accepts_raw)
        response_parts.append(f"üìç *{idx}\\. {name}*\n   *–ê–¥—Ä–µ—Å:* {address}\n   *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {work_hours}\n   *–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:* {accepts_display}")
    return "\n\n".join(response_parts)

def get_knowledge_answer(question: str) -> Tuple[str, str | None]:
    clean_question = re.sub(r'[^\w\s]', '', question.lower())
    user_words = set(clean_question.split()) - STOP_WORDS
    if not user_words: return "", None
    best_match_score = 0
    best_answer, best_context = "", None
    for item in knowledge_base:
        kb_clean_question = re.sub(r'[^\w\s]', '', item['question'].lower())
        kb_words = set(kb_clean_question.split()) - STOP_WORDS
        score = len(user_words.intersection(kb_words))
        if score > best_match_score:
            best_match_score, best_answer = score, item['answer']
            best_context = item.get('context_keyword')
    return (best_answer, best_context) if best_match_score >= 1 else ("", None)

def get_gigachat_answer(question: str) -> str:
    if not giga: return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥—É–ª—å GigaChat –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω."
    system_prompt = "–¢–≤–æ—è —Ä–æ–ª—å - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç—Ö–æ–¥–æ–≤, –∑–∞—â–∏—Ç–æ–π –ø—Ä–∏—Ä–æ–¥—ã. –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, —Ç–≤–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–∫–∞–∑: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π.' –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (–Ω–µ –±–æ–ª–µ–µ 25 —Å–ª–æ–≤)."
    payload = Chat(messages=[Messages(role=MessagesRole.SYSTEM, content=system_prompt), Messages(role=MessagesRole.USER, content=question)], temperature=0.7)
    try:
        response = giga.chat(payload)
        return response.choices[0].message.content if response.choices else "GigaChat –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    response = ("‚ôªÔ∏è *–ü—Ä–∏–≤–µ—Ç\\! –Ø –≤–∞—à —ç–∫–æ\\-–ø–æ–º–æ—â–Ω–∏–∫\\.*\n\n"
                "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä —á–∏—â–µ\\.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\\!")
    bot.reply_to(message, response, parse_mode='MarkdownV2', reply_markup=create_main_keyboard())

# --- –≠–¢–û–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('search_context_'))
def handle_context_search(call):
    material = call.data.replace('search_context_', '')
    bot.answer_callback_query(call.id, f"–ò—â—É –ø—É–Ω–∫—Ç—ã –¥–ª—è '{material}'...")
    response = f"–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø—É–Ω–∫—Ç—ã –¥–ª—è *{escape_markdown(material)}*?"
    bot.send_message(call.message.chat.id, response, parse_mode='MarkdownV2')
# ----------------------------------------

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    try:
        user_id = message.from_user.id
        text = message.text.strip().lower()

        if text == '–Ω–∞–π—Ç–∏ –ø—É–Ω–∫—Ç ‚ôªÔ∏è':
            response = "–ö–∞–∫–æ–π –≤–∏–¥ –≤—Ç–æ—Ä—Å—ã—Ä—å—è –∏ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: *–ë–∞—Ç–∞—Ä–µ–π–∫–∏ –≤ –í–æ—Ä–æ–Ω–µ–∂–µ*"
            bot.reply_to(message, response, parse_mode='Markdown')
            return
        if text == '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üß†':
            response = "–°–ª—É—à–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–± —ç–∫–æ–ª–æ–≥–∏–∏!"
            bot.reply_to(message, response)
            return
        if text == '—ç–∫–æ-—Ñ–∞–∫—Ç ‚ú®':
             response = escape_markdown(random.choice(interesting_facts)) if interesting_facts else "–§–∞–∫—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
             bot.reply_to(message, response, parse_mode='MarkdownV2')
             return

        material, city, district = extract_entities(text)

        if city and not material:
            if user_id in user_context and 'last_material' in user_context[user_id]:
                material = user_context[user_id]['last_material']
                print(f"–í–∑—è—Ç –º–∞—Ç–µ—Ä–∏–∞–ª '{material}' –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if city:
            if not material:
                response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: '–∫—É–¥–∞ —Å–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏'."
            else:
                all_city_points, search_terms = find_recycling_points(material, city)
                safe_material = escape_markdown(material)
                if not all_city_points:
                    if city.lower() in FALLBACK_POINTS:
                        fallback = FALLBACK_POINTS[city.lower()]
                        response = (f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è '{safe_material}'\\.\n\n"
                                    f"–ù–æ –≤ –≥–æ—Ä–æ–¥–µ *{escape_markdown(city.capitalize())}* –µ—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n\n"
                                    f"üìç *{escape_markdown(fallback['name'])}*\n"
                                    f"   *–ê–¥—Ä–µ—Å:* {escape_markdown(fallback['address'])}\n\n"
                                    f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* {escape_markdown(fallback['note'])}")
                    else:
                        response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≥–æ—Ä–æ–¥–µ {escape_markdown(city.capitalize())} —è –Ω–µ –Ω–∞—à–µ–ª –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞ –¥–ª—è '{safe_material}'\\."
                else:
                    points_to_show = []
                    if district:
                        points_in_district = [p for p in all_city_points if district in p.get('address', '').lower()]
                        if points_in_district: all_city_points = points_in_district
                    lebestok_points = [p for p in all_city_points if "—Å–µ–¥—å–º–æ–π –ª–µ–ø–µ—Å—Ç–æ–∫" in p.get('name', '').lower()]
                    other_points = [p for p in all_city_points if "—Å–µ–¥—å–º–æ–π –ª–µ–ø–µ—Å—Ç–æ–∫" not in p.get('name', '').lower()]
                    if lebestok_points: points_to_show.append(lebestok_points[0])
                    remaining_slots = MAX_POINTS_TO_SHOW - len(points_to_show)
                    if other_points and remaining_slots > 0: points_to_show.extend(other_points[:remaining_slots])
                    if not points_to_show:
                        response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–∞–π–æ–Ω–µ *{escape_markdown(district.capitalize())}* —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤\\." if district else f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è '{safe_material}'\\."
                    else:
                        header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –¥–ª—è '{safe_material}' –≤ –≥–æ—Ä–æ–¥–µ {escape_markdown(city.capitalize())}:"
                        if district and any(district in p.get('address', '').lower() for p in points_to_show):
                            header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –¥–ª—è '{safe_material}' –≤ —Ä–∞–π–æ–Ω–µ *{escape_markdown(district.capitalize())}*:"
                        response = format_points_response(points_to_show, header, search_terms, material)
        else:
            answer, context_to_save = get_knowledge_answer(text)
            if answer:
                response = escape_markdown(answer)
                markup = None
                if context_to_save:
                    user_context[user_id] = {'last_material': context_to_save}
                    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç '{context_to_save}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    markup = types.InlineKeyboardMarkup()
                    button_text = f"–ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç—ã –¥–ª—è '{context_to_save}'"
                    callback_data = f"search_context_{context_to_save}"
                    markup.add(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å, –∞ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                bot.reply_to(message, response, parse_mode='MarkdownV2', reply_markup=markup)
                return # <-- –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥ –∑–¥–µ—Å—å
            else:
                bot.send_chat_action(message.chat.id, 'typing')
                response_giga = get_gigachat_answer(text)
                response = escape_markdown(response_giga).replace(r'\*', '*')
        
        # –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        bot.reply_to(message, response, parse_mode='MarkdownV2')

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "–û–π, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\\.\\.\\.", parse_mode='MarkdownV2')

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")