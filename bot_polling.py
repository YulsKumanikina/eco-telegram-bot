# =========================================================================
# ===            –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –≠–ö–û-–ß–ï–õ–õ–ï–ù–î–ñ–ê–ú–ò                   ===
# =========================================================================

import telebot
from telebot import types 
import pandas as pd
import json
import re
from typing import List, Tuple
from gigachat.client import GigaChatSyncClient
from gigachat.models import Chat, Messages, MessagesRole
import random
from datetime import datetime, date

# --- –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ß–ï–õ–õ–ï–ù–î–ñ–ï–ô ---
import db_manager as db
import challenges_data as challenges
from apscheduler.schedulers.background import BackgroundScheduler
# -------------------------------------

# ... (–≤—Å–µ –≤–∞—à–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
user_context = {}
STOP_WORDS = set(['–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ', '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É', '—Ç–∞–∫–æ–µ', '—ç—Ç–æ'])
SEARCH_TRIGGERS = ['–∫—É–¥–∞ —Å–¥–∞—Ç—å', '–≥–¥–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç', '–ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞', '–ø—É–Ω–∫—Ç—ã –ø—Ä–∏—ë–º–∞', '–∞–¥—Ä–µ—Å–∞', '–∞–¥—Ä–µ—Å', '–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–≥–¥–µ', '–∫—É–¥–∞']
JUNK_PREFIXES = ['–∞', '–≤', '–∏', '—Å', '–∫', '–ø–æ']

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    from config import (TELEGRAM_TOKEN, GIGACHAT_API_KEY, KNOLEDGE_BASE_PATH, RECYCLING_POINTS_PATH, INTERESTING_FACTS_PATH, FALLBACK_POINTS)
except ImportError:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª config.py –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–µ–º.")
    exit()

MAX_POINTS_TO_SHOW = 3

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = telebot.TeleBot(TELEGRAM_TOKEN)
try:
    giga = GigaChatSyncClient(credentials=GIGACHAT_API_KEY, verify_ssl_certs=False)
    print("GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GigaChat: {e}"); giga = None

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ---
db.init_db()
print("–ë–æ—Ç (–≤ —Ä–µ–∂–∏–º–µ polling) –∑–∞–ø—É—â–µ–Ω...")

# --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
# ... (—Ñ—É–Ω–∫—Ü–∏—è load_data –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def load_data() -> Tuple[pd.DataFrame, List[dict], List[str]]:
    try:
        points = pd.read_csv(RECYCLING_POINTS_PATH)
        with open(KNOLEDGE_BASE_PATH, 'r', encoding='utf-8') as f: knowledge = json.load(f)
        with open(INTERESTING_FACTS_PATH, 'r', encoding='utf-8') as f: facts = json.load(f)
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return points, knowledge, facts
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"); return pd.DataFrame(), [], []
points_df, knowledge_base, interesting_facts = load_data()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
# ... (–≤—Å–µ –≤–∞—à–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: escape_markdown, create_main_keyboard –∏ —Ç.–¥. –æ—Å—Ç–∞—é—Ç—Å—è –∑–¥–µ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def escape_markdown(text: str) -> str:
    return re.sub(f'([{re.escape(r"_*[]()~`>#+-=|{}.!")}])', r'\\\1', text)

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    markup.add(types.KeyboardButton('–ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç ‚ôªÔ∏è'), types.KeyboardButton('–≠–∫–æ-—á–µ–ª–ª–µ–Ω–¥–∂ üí™'), types.KeyboardButton('–≠–∫–æ-—Ñ–∞–∫—Ç ‚ú®'))
    return markup

def extract_entities(text: str) -> Tuple[str | None, str | None, str | None]:
    clean_text = re.sub(r'[^\w\s]', '', text).lower()
    city, material, district = None, None, None
    cities = ['–≤–æ—Ä–æ–Ω–µ–∂', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥']
    for c in cities:
        if c in clean_text: city = c; break
    if city == '–≤–æ—Ä–æ–Ω–µ–∂':
        districts = ['—Å–æ–≤–µ—Ç—Å–∫–∏–π', '–ª–µ–Ω–∏–Ω—Å–∫–∏–π', '–∫–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∏–π', '–ª–µ–≤–æ–±–µ—Ä–µ–∂–Ω—ã–π', '–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π']
        for d in districts:
            if d in clean_text: district = d; clean_text = clean_text.replace(d, '').replace('—Ä–∞–π–æ–Ω', ''); break
    temp_material = clean_text
    if city: temp_material = temp_material.replace(city, '')
    for trigger in SEARCH_TRIGGERS: temp_material = temp_material.replace(trigger, '')
    material = temp_material.strip()
    words = material.split()
    if words and words[0] in JUNK_PREFIXES:
        material = ' '.join(words[1:])
    return material, city, district

def find_recycling_points(material: str, city: str) -> Tuple[List[dict], List[str]]:
    if points_df.empty or not material or not city: return [], []
    try:
        synonym_map = {'—à–∏–Ω—ã': ['—à–∏–Ω', '–ø–æ–∫—Ä—ã—à–∫', '–∫–æ–ª–µ—Å'], '—Ñ—É—Ç–±–æ–ª–∫': ['—Ñ—É—Ç–±–æ–ª–∫', '–æ–¥–µ–∂–¥', '–≤–µ—â–∏', '—Ç–µ–∫—Å—Ç–∏–ª—å'], '–±—É—Ç—ã–ª–∫': ['–±—É—Ç—ã–ª–∫', '–ø—ç—Ç', '–ø–ª–∞—Å—Ç–∏–∫'], '–ø–ª–∞—Å—Ç–∏–∫': ['–ø–ª–∞—Å—Ç–∏–∫', '–ø—ç—Ç', '–±—É—Ç—ã–ª–∫', 'hdpe', '–ø–Ω–¥'], '–±–∞—Ç–∞—Ä–µ–π–∫': ['–±–∞—Ç–∞—Ä–µ–π–∫', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä'], '–±—É–º–∞–≥': ['–±—É–º–∞–≥', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–∫–∞—Ä—Ç–æ–Ω', '–∫–Ω–∏–≥'], '–∫–∞—Ä—Ç–æ–Ω': ['–∫–∞—Ä—Ç–æ–Ω', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–±—É–º–∞–≥'], '–∫–Ω–∏–≥': ['–∫–Ω–∏–≥', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–±—É–º–∞–≥'], '—Å—Ç–µ–∫–ª': ['—Å—Ç–µ–∫–ª', '–±–∞–Ω–∫'], '–æ–¥–µ–∂–¥': ['–æ–¥–µ–∂–¥', '–≤–µ—â–∏', '—Ç–µ–∫—Å—Ç–∏–ª—å', '—Ñ—É—Ç–±–æ–ª–∫'], '–º–µ—Ç–∞–ª–ª': ['–º–µ—Ç–∞–ª–ª', '–∂–µ—Å—Ç—è–Ω', '–∞–ª—é–º–∏–Ω'], '–∫—Ä—ã—à–∫': ['–∫—Ä—ã—à–∫'], '—Ç–µ—Ö–Ω–∏–∫': ['—Ç–µ—Ö–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'], '–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã': ['–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã', '—Ä—Ç—É—Ç—å', '–≥—Ä–∞–¥—É—Å–Ω–∏–∫', '–ª–∞–º–ø–æ—á–∫', '–ª–∞–º–ø–∞'], '–∑—É–±–Ω—ã–µ —â–µ—Ç–∫–∏': ['–∑—É–±–Ω–∞—è —â–µ—Ç–∫–∞', '–∑—É–±–Ω—ã–µ —â–µ—Ç–∫–∏']}
        search_terms = []
        for key in synonym_map.keys():
            if key in material: search_terms = synonym_map[key]; break
        if not search_terms: search_terms = [material]
        city_points = points_df[points_df['city'].str.lower() == city.lower()]
        valid_points = city_points.dropna(subset=['accepts'])
        pattern = '|'.join(search_terms)
        found_points = valid_points[valid_points['accepts'].str.lower().str.contains(pattern)]
        return found_points.to_dict('records'), search_terms
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"); return [], []

def format_points_response(points: List[dict], header: str, search_terms: List[str], original_material: str) -> str:
    response_parts = [header]
    for idx, point in enumerate(points, 1):
        name, address, work_hours = escape_markdown(point.get('name', '')), escape_markdown(point.get('address', '')), escape_markdown(point.get('work_hours', ''))
        accepts_raw = str(point.get('accepts', ''))
        accepts_display = f"–î–∞, –≤–∫–ª—é—á–∞—è '{escape_markdown(original_material.capitalize())}' –∏ –¥—Ä—É–≥–æ–µ\\." if any(term in accepts_raw.lower() for term in search_terms) else escape_markdown(accepts_raw[:100] + '...' if len(accepts_raw) > 100 else accepts_raw)
        response_parts.append(f"üìç *{idx}\\. {name}*\n   *–ê–¥—Ä–µ—Å:* {address}\n   *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {work_hours}\n   *–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:* {accepts_display}")
    return "\n\n".join(response_parts)

def get_knowledge_answer(question: str) -> Tuple[str, str | None]:
    clean_question = re.sub(r'[^\w\s]', '', question.lower())
    user_words = set(clean_question.split()) - STOP_WORDS
    if not user_words: return "", None
    best_match_score = 0
    best_answer, best_context = "", None
    for item in knowledge_base:
        kb_clean_question = re.sub(r'[^\w\s]', '', item['question'].lower())
        kb_words = set(kb_clean_question.split()) - STOP_WORDS
        if not kb_words: continue
        score = len(user_words.intersection(kb_words))
        ratio = score / len(kb_words) if len(kb_words) > 0 else 0
        if score >= 2 and ratio > 0.6 and score > best_match_score:
            best_match_score, best_answer = score, item['answer']
            best_context = item.get('context_keyword')
    return (best_answer, best_context) if best_match_score >= 2 else ("", None)

def get_gigachat_answer(question: str) -> str:
    if not giga: return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥—É–ª—å GigaChat –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω."
    system_prompt = "–¢–≤–æ—è —Ä–æ–ª—å - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –û–î–ù–ò–ú, –º–∞–∫—Å–∏–º—É–º –¥–≤—É–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –ù–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–π –ª–∏–º–∏—Ç –≤ 15 —Å–ª–æ–≤. –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å —Å–ø–∏—Å–∫–∞–º–∏, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è–º–∏ –∏–ª–∏ –ø–æ—ç—Ç–∞–ø–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, —Ç–≤–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–∫–∞–∑: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π.'"
    payload = Chat(messages=[Messages(role=MessagesRole.SYSTEM, content=system_prompt), Messages(role=MessagesRole.USER, content=question)], temperature=0.6)
    try: response = giga.chat(payload); return response.choices[0].message.content
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}"); return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ---
def check_challenges():
    print(f"[{datetime.now()}] –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π...")
    active_challenges = db.get_all_active_challenges()
    for challenge in active_challenges:
        user_id = challenge['user_id']
        challenge_id = challenge['challenge_id']
        start_date = date.fromisoformat(challenge['start_date'])
        challenge_info = challenges.CHALLENGES[challenge_id]
        
        days_passed = (date.today() - start_date).days
        
        if days_passed >= challenge_info['duration_days']:
            # –ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–≤–µ—Ä—à–µ–Ω
            bot.send_message(user_id, challenge_info['end_message'])
            db.end_challenge(user_id)
            print(f"–ß–µ–ª–ª–µ–Ω–¥–∂ {challenge_id} –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        elif days_passed > 0:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            bot.send_message(user_id, f"–î–µ–Ω—å {days_passed + 1}: {challenge_info['daily_message']}")
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "‚ôªÔ∏è *–ü—Ä–∏–≤–µ—Ç\\! –Ø –≤–∞—à —ç–∫–æ\\-–ø–æ–º–æ—â–Ω–∏–∫\\.*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\\!", parse_mode='MarkdownV2', reply_markup=create_main_keyboard())

# --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ß–ï–õ–õ–ï–ù–î–ñ–ï–ô ---
@bot.message_handler(func=lambda message: message.text == '–≠–∫–æ-—á–µ–ª–ª–µ–Ω–¥–∂ üí™')
def handle_challenges_button(message):
    current_challenge = db.get_user_challenge(message.from_user.id)
    if current_challenge:
        challenge_info = challenges.CHALLENGES[current_challenge['challenge_id']]
        start_date = date.fromisoformat(current_challenge['start_date'])
        days_passed = (date.today() - start_date).days
        response = (f"–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ:\n\n"
                    f"*{challenge_info['title']}*\n"
                    f"–î–µ–Ω—å {days_passed + 1} –∏–∑ {challenge_info['duration_days']}.\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ–≥–æ –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π?")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="show_all_challenges"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç, —è –ø—Ä–æ–¥–æ–ª–∂–∞—é!", callback_data="cancel_action"))
        bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
    else:
        show_all_challenges(message.chat.id)

def show_all_challenges(chat_id):
    markup = types.InlineKeyboardMarkup()
    for c_id, c_info in challenges.CHALLENGES.items():
        markup.add(types.InlineKeyboardButton(c_info['title'], callback_data=f"show_challenge_{c_id}"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–Ω—è—Ç—å –µ–≥–æ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_challenge_'))
def callback_show_challenge(call):
    challenge_id = call.data.replace('show_challenge_', '')
    challenge_info = challenges.CHALLENGES[challenge_id]
    response = (f"*{challenge_info['title']}*\n\n"
                f"{challenge_info['description']}\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {challenge_info['duration_days']} –¥–Ω–µ–π. –ì–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤!", callback_data=f"accept_challenge_{challenge_id}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="show_all_challenges"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=response, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_challenge_'))
def callback_accept_challenge(call):
    challenge_id = call.data.replace('accept_challenge_', '')
    db.start_challenge(call.from_user.id, challenge_id)
    challenge_info = challenges.CHALLENGES[challenge_id]
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=challenge_info['start_message'])

@bot.callback_query_handler(func=lambda call: call.data == 'show_all_challenges')
def callback_back_to_challenges(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_all_challenges(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_action')
def callback_cancel(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂! üí™")

# -----------------------------------------------

@bot.callback_query_handler(func=lambda call: call.data.startswith('search_context_'))
def handle_context_search(call):
    material = call.data.replace('search_context_', '')
    bot.answer_callback_query(call.id, f"–ò—â—É –ø—É–Ω–∫—Ç—ã –¥–ª—è '{material}'...")
    bot.send_message(call.message.chat.id, f"–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø—É–Ω–∫—Ç—ã –¥–ª—è *{escape_markdown(material)}*?", parse_mode='MarkdownV2')

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    try:
        user_id = message.from_user.id
        text = message.text.strip().lower()
        response = ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã,
        # –∫—Ä–æ–º–µ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏.
        if text == '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üß†':
            bot.reply_to(message, "–°–ª—É—à–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ö–æ–¥–æ–≤!"); return
        if text == '—ç–∫–æ-—Ñ–∞–∫—Ç ‚ú®':
             bot.reply_to(message, escape_markdown(random.choice(interesting_facts)), parse_mode='MarkdownV2'); return

        is_search_query = any(trigger in text for trigger in SEARCH_TRIGGERS)
        material, city, district = extract_entities(text)

        if city and not material:
            material = user_context.get(user_id, {}).pop('last_material', None)
        
        if (city and material) or (is_search_query and material):
            if not city:
                user_context[user_id] = {'last_material': material}
                bot.reply_to(message, f"–û—Ç–ª–∏—á–Ω–æ, –∏—â–µ–º '{escape_markdown(material)}'. –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ?"); return
            
            all_city_points, search_terms = find_recycling_points(material, city)
            safe_material = escape_markdown(material)
            if not all_city_points:
                if city.lower() in FALLBACK_POINTS:
                    fallback = FALLBACK_POINTS[city.lower()]
                    response = (f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è '{safe_material}'\\.\n\n"
                                f"–ù–æ –≤ –≥–æ—Ä–æ–¥–µ *{escape_markdown(city.capitalize())}* –µ—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n\n"
                                f"üìç *{escape_markdown(fallback['name'])}*\n"
                                f"   *–ê–¥—Ä–µ—Å:* {escape_markdown(fallback['address'])}\n\n"
                                f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* {escape_markdown(fallback['note'])}")
                else: response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è '{safe_material}' –≤ –≥–æ—Ä–æ–¥–µ *{escape_markdown(city.capitalize())}*\\."
            else:
                points_to_show = []
                if district:
                    points_in_district = [p for p in all_city_points if district in p.get('address', '').lower()]
                    if points_in_district: all_city_points = points_in_district
                lebestok_points = [p for p in all_city_points if "—Å–µ–¥—å–º–æ–π –ª–µ–ø–µ—Å—Ç–æ–∫" in p.get('name', '').lower()]
                other_points = [p for p in all_city_points if "—Å–µ–¥—å–º–æ–π –ª–µ–ø–µ—Å—Ç–æ–∫" not in p.get('name', '').lower()]
                if lebestok_points: points_to_show.append(lebestok_points[0])
                remaining_slots = MAX_POINTS_TO_SHOW - len(points_to_show)
                if other_points and remaining_slots > 0: points_to_show.extend(other_points[:remaining_slots])
                if not points_to_show: response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è '{safe_material}' –Ω–µ –Ω–∞—à–ª–æ—Å—å\\."
                else:
                    header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –¥–ª—è '{safe_material}' –≤ –≥–æ—Ä–æ–¥–µ *{escape_markdown(city.capitalize())}*:"
                    if district and any(district in p.get('address', '').lower() for p in points_to_show):
                        header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –¥–ª—è '{safe_material}' –≤ —Ä–∞–π–æ–Ω–µ *{escape_markdown(district.capitalize())}*:"
                    response = format_points_response(points_to_show, header, search_terms, material)
        else:
            answer, context_to_save = get_knowledge_answer(text)
            if answer:
                response, markup = escape_markdown(answer), None
                if context_to_save:
                    user_context[user_id] = {'last_material': context_to_save}
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton(f"–ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç—ã –¥–ª—è '{context_to_save}'", callback_data=f"search_context_{context_to_save}"))
                bot.reply_to(message, response, parse_mode='MarkdownV2', reply_markup=markup); return
            else:
                bot.send_chat_action(message.chat.id, 'typing')
                response_giga = get_gigachat_answer(text)
                response = escape_markdown(response_giga).replace(r'\*', '*')
        
        bot.reply_to(message, response, parse_mode='MarkdownV2')
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "–û–π, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\\.\\.\\.", parse_mode='MarkdownV2')

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ---
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler()
    # –ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 —É—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
    scheduler.add_job(check_challenges, 'cron', hour=10)
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∑–∞–ø—É—â–µ–Ω.")
    
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
        scheduler.shutdown() # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ