# bot_polling.py
import telebot
import pandas as pd
import json
import re
from typing import List, Tuple # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¥–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    from config import TELEGRAM_TOKEN, KNOLEDGE_BASE_PATH, RECYCLING_POINTS_PATH
except ImportError:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª config.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–µ–º.")
    exit()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(TELEGRAM_TOKEN)
print("–ë–æ—Ç (–≤ —Ä–µ–∂–∏–º–µ polling) –∑–∞–ø—É—â–µ–Ω...")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def load_data() -> Tuple[pd.DataFrame, List[dict]]: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: —É—Ç–æ—á–Ω–∏–ª–∏, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤."""
    try:
        points = pd.read_csv(RECYCLING_POINTS_PATH)
        with open(KNOLEDGE_BASE_PATH, 'r', encoding='utf-8') as f:
            knowledge = json.load(f)
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return points, knowledge
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame(), []

points_df, knowledge_base = load_data()

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ ---
def find_recycling_points(material: str, city: str) -> List[dict]: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∑–∞–º–µ–Ω–∏–ª–∏ list –Ω–∞ List[dict]
    """–ü–æ–∏—Å–∫ –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞ –ø–æ –≥–æ—Ä–æ–¥—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—É."""
    if points_df.empty: return []
    try:
        city_points = points_df[points_df['city'].str.lower() == city.lower()]
        if city_points.empty: return []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü 'accepts' –Ω–µ –ø—É—Å—Ç–æ–π (–Ω–µ NaN), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        valid_points = city_points.dropna(subset=['accepts'])
        found_points = valid_points[valid_points['accepts'].str.lower().str.contains(material.lower())]
        return found_points.to_dict('records')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

def get_knowledge_answer(question: str) -> str:
    """–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    clean_question = re.sub(r'[^\w\s]', '', question.lower())
    for item in knowledge_base:
        clean_item_question = re.sub(r'[^\w\s]', '', item['question'].lower())
        if clean_question in clean_item_question:
            return item['answer']
    return ""

def extract_material_and_city(text: str) -> Tuple[str | None, str | None]: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: —É—Ç–æ—á–Ω–∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –≥–æ—Ä–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞."""
    text_lower = text.lower()
    city = None
    material = None
    if '–≤–æ—Ä–æ–Ω–µ–∂' in text_lower: city = '–≤–æ—Ä–æ–Ω–µ–∂'
    elif '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' in text_lower: city = '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
    if city:
        material = text_lower.replace(city, '')
        triggers = ['–∫—É–¥–∞ —Å–¥–∞—Ç—å', '–≥–¥–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç', '–≤', '–º–æ–∂–Ω–æ —Å–¥–∞—Ç—å']
        for trigger in triggers:
            material = material.replace(trigger, '')
        material = material.strip()
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        if material.endswith('–∏') or material.endswith('—ã') or material.endswith('—É'):
            material = material[:-1]
    return material, city

def format_points_response(points: List[dict], city: str, material: str) -> str: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: list –Ω–∞ List[dict]
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –≤ –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç."""
    response_parts = [f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞ –¥–ª—è '{material}' –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()}:\n"]
    for idx, point in enumerate(points[:5], 1): # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤
        name = point.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        address = point.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        work_hours = point.get('work_hours', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')
        # –û—Å—Ç–æ—Ä–æ–∂–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
        accepts_raw = point.get('accepts', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        accepts = (str(accepts_raw)[:100] + '...') if len(str(accepts_raw)) > 100 else str(accepts_raw)
        
        response_parts.append(
            f"üìç *{idx}. {name}*\n"
            f"   *–ê–¥—Ä–µ—Å:* {address}\n"
            f"   *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {work_hours}\n"
            f"   *–ß—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:* {accepts}"
        )
    return "\n\n".join(response_parts)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telebot ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    response = (
        "‚ôªÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è –≤ –í–æ—Ä–æ–Ω–µ–∂–µ –∏ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚û°Ô∏è –ö—É–¥–∞ —Å–¥–∞—Ç—å –ø–ª–∞—Å—Ç–∏–∫ –≤ –í–æ—Ä–æ–Ω–µ–∂–µ?\n"
        "‚û°Ô∏è –ì–¥–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –±–∞—Ç–∞—Ä–µ–π–∫–∏ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ?\n"
        "‚û°Ô∏è –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞–∫—É–ª–∞—Ç—É—Ä—É –∫ —Å–¥–∞—á–µ?"
    )
    bot.reply_to(message, response)

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        text = message.text.strip()
        material, city = extract_material_and_city(text)
        
        if city and material:
            points = find_recycling_points(material, city)
            if points:
                response = format_points_response(points, city, material)
            else:
                response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()} —è –Ω–µ –Ω–∞—à–µ–ª –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞ –¥–ª—è '{material}'."
        else:
            answer = get_knowledge_answer(text)
            response = answer if answer else "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø—É–Ω–∫—Ç–∞—Ö –ø—Ä–∏–µ–º–∞ –≤ –í–æ—Ä–æ–Ω–µ–∂–µ –∏–ª–∏ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ, –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–± —ç–∫–æ–ª–æ–≥–∏–∏."

        bot.reply_to(message, response, parse_mode='Markdown')
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π!")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    bot.polling(none_stop=True)